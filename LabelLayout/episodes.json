[{"media_duration":1118,"synopsis":"We improve the graph-building algorithm by detecting overlaps between the tracks.","title":"Building the Graph (Part 2)","number":130,"collection":"map-routing","released_at":565887600,"url":"https:\/\/talk.objc.io\/episodes\/S01E130-building-the-graph-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/744446134_590x270.jpg","subscription_only":true},{"media_duration":1912,"synopsis":"We start implementing the algorithm that transforms the GPS points into a graph, which we then visualize for debugging purposes.","title":"Building the Graph (Part 1)","number":129,"collection":"map-routing","released_at":565282800,"url":"https:\/\/talk.objc.io\/episodes\/S01E129-building-the-graph-part-1","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/741655635_590x270.jpg","subscription_only":true},{"media_duration":1605,"synopsis":"We start implementing the routing logic by looking at the problem of calculating the shortest distance from a point to a line.","title":"Shortest Distance from Point to Line","number":128,"collection":"map-routing","released_at":564678000,"url":"https:\/\/talk.objc.io\/episodes\/S01E128-shortest-distance-from-point-to-line","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/739679550_590x270.jpg","subscription_only":true},{"media_duration":1541,"synopsis":"We enable the selection of points on our running tracks by tapping on the map, and we finish up by factoring a lot of this code out of the view controller.","title":"Selecting Points on Tracks","number":127,"collection":"map-routing","released_at":564073200,"url":"https:\/\/talk.objc.io\/episodes\/S01E127-selecting-points-on-tracks","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/737791619_590x270.jpg","subscription_only":true},{"media_duration":1145,"synopsis":"We show the routing app we'll build in this series and take the first steps by rendering track polygons on a map.","title":"Rendering Tracks","number":126,"collection":"map-routing","released_at":563468400,"url":"https:\/\/talk.objc.io\/episodes\/S01E126-rendering-tracks","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/737235208_590x270.jpg","subscription_only":false},{"media_duration":1244,"synopsis":"We show how the layout library we've built over the past two months can be used to adapt to any font and screen size.","title":"Building a Responsive Layout","number":125,"collection":"building-a-layout-library","released_at":562863600,"url":"https:\/\/talk.objc.io\/episodes\/S01E125-building-a-responsive-layout","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/733862073_590x270.jpg","subscription_only":false},{"media_duration":1161,"synopsis":"We implement the flexible width option for nested layouts.","title":"Flexible Boxes","number":124,"collection":"building-a-layout-library","released_at":562255200,"url":"https:\/\/talk.objc.io\/episodes\/S01E124-flexible-boxes","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/733295682_590x270.jpg","subscription_only":true},{"media_duration":1211,"synopsis":"We build upon the nested layout feature from last time to support layout margins, backgrounds, and more.","title":"Margins and Backgrounds","number":123,"collection":"building-a-layout-library","released_at":561650400,"url":"https:\/\/talk.objc.io\/episodes\/S01E123-margins-and-backgrounds","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746438_590x270.jpg","subscription_only":true},{"media_duration":1428,"synopsis":"We build a feature that allows us to create more complex layouts by nesting layouts within each other.","title":"Nested Layouts","number":122,"collection":"building-a-layout-library","released_at":561045600,"url":"https:\/\/talk.objc.io\/episodes\/S01E122-nested-layouts","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746490_590x270.jpg","subscription_only":true},{"media_duration":936,"synopsis":"We add flexible spaces to our layout library and show how elements can be shown or hidden depending on the available space.","title":"Flexible Spaces","number":121,"collection":"building-a-layout-library","released_at":560440800,"url":"https:\/\/talk.objc.io\/episodes\/S01E121-flexible-spaces","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746570_590x270.jpg","subscription_only":true},{"media_duration":1495,"synopsis":"We refactor our code to remove duplication, improve efficiency, and enable features like flexible spacing.","title":"Refactoring for Efficiency & Upcoming Features","number":120,"collection":"building-a-layout-library","released_at":559836000,"url":"https:\/\/talk.objc.io\/episodes\/S01E120-refactoring-for-efficiency-upcoming-features","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746656_590x270.jpg","subscription_only":true},{"media_duration":1465,"synopsis":"We add some features to our layout library — starting with horizontal and vertical spacing — along with a better syntax to define layouts.","title":"Spacing & Better Syntax","number":119,"collection":"building-a-layout-library","released_at":559231200,"url":"https:\/\/talk.objc.io\/episodes\/S01E119-spacing-better-syntax","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746686_590x270.jpg","subscription_only":true},{"media_duration":1878,"synopsis":"We start building a responsive layout library that makes it easy to create layouts for all screen and font sizes.","title":"Introduction & Prototype","number":118,"collection":"building-a-layout-library","released_at":558626400,"url":"https:\/\/talk.objc.io\/episodes\/S01E118-introduction-prototype","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746743_590x270.jpg","subscription_only":false},{"media_duration":895,"synopsis":"Using a simple key path API, we add the ability to control the visibility of sections by any condition.","title":"Showing & Hiding Sections","number":117,"collection":"building-a-form-library","released_at":558021600,"url":"https:\/\/talk.objc.io\/episodes\/S01E117-showing-hiding-sections","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746779_590x270.jpg","subscription_only":false},{"media_duration":1338,"synopsis":"We add support for arrays by implementing an unkeyed decoding container and use custom decoding logic for dates and URLs.","title":"Building a Custom XML Decoder (Part 2)","number":116,"collection":"server-side-swift","released_at":557416800,"url":"https:\/\/talk.objc.io\/episodes\/S01E116-building-a-custom-xml-decoder-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746804_590x270.jpg","subscription_only":true},{"media_duration":1486,"synopsis":"We implement a custom XML decoder that allows us to decode responses from an XML API using Decodable.","title":"Building a Custom XML Decoder","number":115,"collection":"server-side-swift","released_at":556812000,"url":"https:\/\/talk.objc.io\/episodes\/S01E115-building-a-custom-xml-decoder","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746871_590x270.jpg","subscription_only":false},{"media_duration":1408,"synopsis":"We're using Swift's Mirror and Decodable APIs to generate database queries for structs in our Swift Talk backend project.","title":"Reflection with Mirror and Decodable","number":114,"collection":"server-side-swift","released_at":556207200,"url":"https:\/\/talk.objc.io\/episodes\/S01E114-reflection-with-mirror-and-decodable","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746929_590x270.jpg","subscription_only":true},{"media_duration":1665,"synopsis":"We return to the form library project and add several features to simplify common tasks.","title":"Text Fields, Multi-Select, and Nested Forms","number":113,"collection":"building-a-form-library","released_at":555602400,"url":"https:\/\/talk.objc.io\/episodes\/S01E113-text-fields-multi-select-and-nested-forms","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746953_590x270.jpg","subscription_only":false},{"media_duration":1558,"synopsis":"We use Apple's new Network framework to simplify our own code.","title":"iOS Remote Debugger: The Network Framework","number":112,"collection":"tooling","released_at":554997600,"url":"https:\/\/talk.objc.io\/episodes\/S01E112-ios-remote-debugger-the-network-framework","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747011_590x270.jpg","subscription_only":true},{"media_duration":1775,"synopsis":"We implement a JSON over TCP decoder to enable the debug client to receive data from the Mac app.","title":"iOS Remote Debugger: Receiving Data","number":111,"collection":"tooling","released_at":554392800,"url":"https:\/\/talk.objc.io\/episodes\/S01E111-ios-remote-debugger-receiving-data","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747055_590x270.jpg","subscription_only":true},{"media_duration":1358,"synopsis":"We create a class that encapsulates the complexities of sending data via an output stream.","title":"iOS Remote Debugger: Sending Data","number":110,"collection":"tooling","released_at":553788000,"url":"https:\/\/talk.objc.io\/episodes\/S01E110-ios-remote-debugger-sending-data","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747111_590x270.jpg","subscription_only":true},{"media_duration":1710,"synopsis":"We're building a remote view state debugger, starting with the networking code on the client.","title":"iOS Remote Debugger: Connecting with Bonjour","number":109,"collection":"tooling","released_at":553183200,"url":"https:\/\/talk.objc.io\/episodes\/S01E109-ios-remote-debugger-connecting-with-bonjour","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747135_590x270.jpg","subscription_only":false},{"media_duration":1646,"synopsis":"In the last episode of this series, we factor out view code from the large view controller into a custom view class.","title":"Extracting View Code","number":108,"collection":"architecture","released_at":552578400,"url":"https:\/\/talk.objc.io\/episodes\/S01E108-extracting-view-code","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747199_590x270.jpg","subscription_only":true},{"media_duration":1791,"synopsis":"We use the child view controller we created last time to factor out more code from the large view controller.","title":"Child View Controllers (2)","number":107,"collection":"architecture","released_at":551973600,"url":"https:\/\/talk.objc.io\/episodes\/S01E107-child-view-controllers-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747263_590x270.jpg","subscription_only":true},{"media_duration":1586,"synopsis":"We extract a child view controller to further slim down our large view controller, making sure the code keeps compiling throughout the process.","title":"Child View Controllers","number":106,"collection":"architecture","released_at":551368800,"url":"https:\/\/talk.objc.io\/episodes\/S01E106-child-view-controllers","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747336_590x270.jpg","subscription_only":true},{"media_duration":1672,"synopsis":"We refactor networking-related code out of the view controller, separating networking and data transformation logic from UI code in the process.","title":"Extracting Networking Code","number":105,"collection":"architecture","released_at":550764000,"url":"https:\/\/talk.objc.io\/episodes\/S01E105-extracting-networking-code","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747358_590x270.jpg","subscription_only":true},{"media_duration":1130,"synopsis":"We extract Core Data-related code from the large view controller and move it into the model layer.","title":"Extracting Model Code","number":104,"collection":"architecture","released_at":550159200,"url":"https:\/\/talk.objc.io\/episodes\/S01E104-extracting-model-code","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747452_590x270.jpg","subscription_only":true},{"media_duration":1571,"synopsis":"We begin refactoring a large view controller from the Wikipedia iOS app by pulling pieces of helper code out as pure functions.","title":"Extracting Pure Functions","number":103,"collection":"architecture","released_at":549554400,"url":"https:\/\/talk.objc.io\/episodes\/S01E103-extracting-pure-functions","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747474_590x270.jpg","subscription_only":false},{"media_duration":1468,"synopsis":"After finishing the cleanup from the last episode, we refactor our forms API to be even more succinct and declarative.","title":"Declarative Syntax","number":102,"collection":"libraries","released_at":548949600,"url":"https:\/\/talk.objc.io\/episodes\/S01E102-declarative-syntax","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747513_590x270.jpg","subscription_only":true},{"media_duration":1622,"synopsis":"We create helper functions for form cells and sections, which simplify managing references and propagating updates.","title":"Cell and Section Helpers","number":101,"collection":"libraries","released_at":548344800,"url":"https:\/\/talk.objc.io\/episodes\/S01E101-cell-and-section-helpers","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747564_590x270.jpg","subscription_only":true},{"media_duration":2920,"synopsis":"In our 100th episode we take questions from our viewers!","title":"100th Episode Live Q&A","number":100,"collection":"experiments","released_at":547813860,"url":"https:\/\/talk.objc.io\/episodes\/S01E100-100th-episode-live-q-a","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747591_590x270.jpg","subscription_only":false},{"media_duration":1742,"synopsis":"We extract reusable toggle switch and text field components from our forms code and do more cleaning up in the process.","title":"Creating Reusable Components","number":99,"collection":"libraries","released_at":547135200,"url":"https:\/\/talk.objc.io\/episodes\/S01E99-creating-reusable-components","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747640_590x270.jpg","subscription_only":true},{"media_duration":1303,"synopsis":"After refactoring in past episodes, it's time for some housekeeping: we clean up our form code and make it more reusable with generics.","title":"Cleaning Up the Code","number":98,"collection":"libraries","released_at":546530400,"url":"https:\/\/talk.objc.io\/episodes\/S01E98-cleaning-up-the-code","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747697_590x270.jpg","subscription_only":true},{"media_duration":1829,"synopsis":"We refactor the form driver class to be reusable and define the entire form in a simple function.","title":"Creating a Reusable Form Driver","number":97,"collection":"libraries","released_at":545925600,"url":"https:\/\/talk.objc.io\/episodes\/S01E97-creating-a-reusable-form-driver","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747757_590x270.jpg","subscription_only":true},{"media_duration":1220,"synopsis":"We continue refactoring our forms code by creating a form table view controller as the first reusable component.","title":"Extracting a Reusable Form View Controller","number":96,"collection":"libraries","released_at":545320800,"url":"https:\/\/talk.objc.io\/episodes\/S01E96-extracting-a-reusable-form-view-controller","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747814_590x270.jpg","subscription_only":false},{"media_duration":1312,"synopsis":"We begin to refactor the imperative table view code from the last episode, working toward a more declarative approach of defining our form.","title":"Simplifying IndexPath Logic","number":95,"collection":"libraries","released_at":544716000,"url":"https:\/\/talk.objc.io\/episodes\/S01E95-simplifying-indexpath-logic","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747851_590x270.jpg","subscription_only":false},{"media_duration":1496,"synopsis":"This episode marks the beginning of a new series where we refactor a hand-coded settings form into a reusable, declarative form library. In this episode, we build the base version and discuss the design goals of the library.","title":"Introduction","number":94,"collection":"libraries","released_at":544114800,"url":"https:\/\/talk.objc.io\/episodes\/S01E94-introduction","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747919_590x270.jpg","subscription_only":false},{"media_duration":1363,"synopsis":"We discuss many considerations and techniques for working with optionals.","title":"Handling Optionals","number":93,"collection":"swift-the-language","released_at":543510000,"url":"https:\/\/talk.objc.io\/episodes\/S01E93-handling-optionals","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731747988_590x270.jpg","subscription_only":true},{"media_duration":1341,"synopsis":"We use Swift's pointer APIs to read a text file and split it into lines without using Swift's collection and string types.","title":"Practicing with Pointers","number":92,"collection":"swift-the-language","released_at":542905200,"url":"https:\/\/talk.objc.io\/episodes\/S01E92-practicing-with-pointers","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748015_590x270.jpg","subscription_only":false},{"media_duration":1424,"synopsis":"We extend a basic Markdown library using protocol composition to add support for syntax highlighting in Swift code blocks.","title":"Rendering Markdown with Syntax Highlighting","number":91,"collection":"functional-programming","released_at":542300400,"url":"https:\/\/talk.objc.io\/episodes\/S01E91-rendering-markdown-with-syntax-highlighting","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748042_590x270.jpg","subscription_only":true},{"media_duration":1319,"synopsis":"We implement a concurrent version of the map method for arrays.","title":"Concurrent Map","number":90,"collection":"swift-the-language","released_at":541695600,"url":"https:\/\/talk.objc.io\/episodes\/S01E90-concurrent-map","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748101_590x270.jpg","subscription_only":false},{"media_duration":1420,"synopsis":"We show how protocol composition can be used to design extensible libraries, thereby solving the so-called \"Expression Problem.\"","title":"Extensible Libraries 2: Protocol Composition","number":89,"collection":"functional-programming","released_at":541090800,"url":"https:\/\/talk.objc.io\/episodes\/S01E89-extensible-libraries-2-protocol-composition","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748136_590x270.jpg","subscription_only":true},{"media_duration":1344,"synopsis":"We discuss the capabilities and limitations of enums and classes when designing extensible libraries.","title":"Extensible Libraries 1: Enums vs Classes","number":88,"collection":"functional-programming","released_at":540486000,"url":"https:\/\/talk.objc.io\/episodes\/S01E88-extensible-libraries-1-enums-vs-classes","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748197_590x270.jpg","subscription_only":false},{"media_duration":1449,"synopsis":"We continue implementing a mini player in the MVC variant of the sample app found in our App Architecture book.","title":"Sharing State between View Controllers in MVC (Part 2)","number":87,"collection":"architecture","released_at":539881200,"url":"https:\/\/talk.objc.io\/episodes\/S01E87-sharing-state-between-view-controllers-in-mvc-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748249_590x270.jpg","subscription_only":true},{"media_duration":1165,"synopsis":"We add a mini player to the MVC variant of the sample app found in our App Architecture book. We adjust our storyboard and discuss how to adapt the architecture.","title":"Sharing State between View Controllers in MVC (Part 1)","number":86,"collection":"architecture","released_at":539276400,"url":"https:\/\/talk.objc.io\/episodes\/S01E86-sharing-state-between-view-controllers-in-mvc-part-1","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748288_590x270.jpg","subscription_only":false},{"media_duration":2011,"synopsis":"We write a wrapper around the libgit2 C library to work with Git repositories from macOS and iOS apps — and for the fun of using Swift's pointer APIs!","title":"Wrapping libgit2","number":85,"collection":"type-safe-api-wrappers","released_at":538671600,"url":"https:\/\/talk.objc.io\/episodes\/S01E85-wrapping-libgit2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748350_590x270.jpg","subscription_only":true},{"media_duration":281,"synopsis":"Today we're releasing the early access edition of our new App Architecture book. We explain how it came about, what's in it, and how early access works.","title":"Introducing Our New Book: App Architecture","number":84,"collection":"architecture","released_at":538074000,"url":"https:\/\/talk.objc.io\/episodes\/S01E84-introducing-our-new-book-app-architecture","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748371_590x270.jpg","subscription_only":false},{"media_duration":1363,"synopsis":"We look at different techniques for wrapping analytics APIs in Swift and discuss their advantages and disadvantages.","title":"Wrapping Analytics APIs","number":83,"collection":"functional-programming","released_at":537462000,"url":"https:\/\/talk.objc.io\/episodes\/S01E83-wrapping-analytics-apis","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748440_590x270.jpg","subscription_only":true},{"media_duration":1120,"synopsis":"We refactor a simple flow layout to have a functional interface, disentangling the layout code from UIKit code.","title":"Refactoring Imperative Layout Code","number":82,"collection":"functional-programming","released_at":536857200,"url":"https:\/\/talk.objc.io\/episodes\/S01E82-refactoring-imperative-layout-code","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748477_590x270.jpg","subscription_only":false},{"media_duration":2147,"synopsis":"We use Xcode's memory debugger to resolve all the reference cycles in our glitch-free reactive code and introduce a proper ownership model.","title":"Reference Cycles and Ownership","number":81,"collection":"reactive-programming","released_at":535647600,"url":"https:\/\/talk.objc.io\/episodes\/S01E81-reference-cycles-and-ownership","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748552_590x270.jpg","subscription_only":true},{"media_duration":802,"synopsis":"We look at how to work with ranges in a mixed Swift String\/NSString environment.","title":"Swift String vs. NSString","number":80,"collection":"swift-the-language","released_at":535042800,"url":"https:\/\/talk.objc.io\/episodes\/S01E80-swift-string-vs-nsstring","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731748581_590x270.jpg","subscription_only":false},{"media_duration":1508,"synopsis":"We benchmark the CSV parsing code from the previous episode and refactor it to become an order of magnitude faster.","title":"String Parsing Performance","number":79,"collection":"swift-the-language","released_at":534438000,"url":"https:\/\/talk.objc.io\/episodes\/S01E79-string-parsing-performance","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749425_590x270.jpg","subscription_only":true},{"media_duration":1708,"synopsis":"We write a simple CSV parser as an example demonstrating how to work with Swift's String and Substring types.","title":"Swift Strings and Substrings","number":78,"collection":"swift-the-language","released_at":533833200,"url":"https:\/\/talk.objc.io\/episodes\/S01E78-swift-strings-and-substrings","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749466_590x270.jpg","subscription_only":false},{"media_duration":1495,"synopsis":"We refactor the simple reactive library from the last episode using topological sorting to avoid any temporarily wrong values.","title":"A Technique to Avoid Reactive Glitches","number":77,"collection":"reactive-programming","released_at":533228400,"url":"https:\/\/talk.objc.io\/episodes\/S01E77-a-technique-to-avoid-reactive-glitches","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749554_590x270.jpg","subscription_only":true},{"media_duration":1096,"synopsis":"We look at an example of a reactive pipeline with surprising behavior, discuss why it occurs, and how it could be improved.","title":"Understanding Reactive Glitches","number":76,"collection":"reactive-programming","released_at":532623600,"url":"https:\/\/talk.objc.io\/episodes\/S01E76-understanding-reactive-glitches","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749611_590x270.jpg","subscription_only":false},{"media_duration":1045,"synopsis":"We clean up our layout code by introducing helper functions that leverage Swift's key paths.","title":"Auto Layout with Key Paths","number":75,"collection":"swift-the-language","released_at":532018800,"url":"https:\/\/talk.objc.io\/episodes\/S01E75-auto-layout-with-key-paths","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749649_590x270.jpg","subscription_only":false},{"media_duration":1269,"synopsis":"We continue to expand our experimental view binding mechanism to implement dark mode in our app.","title":"View Bindings in Pure Swift (Part 2)","number":74,"collection":"architecture","released_at":531414000,"url":"https:\/\/talk.objc.io\/episodes\/S01E74-view-bindings-in-pure-swift-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749702_590x270.jpg","subscription_only":true},{"media_duration":1332,"synopsis":"We experiment with reactive view bindings that don't rely on runtime programming.","title":"View Bindings in Pure Swift","number":73,"collection":"architecture","released_at":530809200,"url":"https:\/\/talk.objc.io\/episodes\/S01E73-view-bindings-in-pure-swift","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749723_590x270.jpg","subscription_only":false},{"media_duration":2011,"synopsis":"We introduce a project we're going to work on over a few episodes. To get familiar with the code, we build a new feature using the app's view-state driven approach.","title":"Adding a Custom View to a View-State Driven App","number":72,"collection":"architecture","released_at":530204400,"url":"https:\/\/talk.objc.io\/episodes\/S01E72-adding-a-custom-view-to-a-view-state-driven-app","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749781_590x270.jpg","subscription_only":true},{"media_duration":1454,"synopsis":"Brandon Kase joins us to show how Swift's type system can be leveraged to check file paths at compile time.","title":"Type-Safe File Paths with Phantom Types","number":71,"collection":"swift-the-language","released_at":529599600,"url":"https:\/\/talk.objc.io\/episodes\/S01E71-type-safe-file-paths-with-phantom-types","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749806_590x270.jpg","subscription_only":false},{"media_duration":926,"synopsis":"We use the reactive array type from episodes #67 and #69 to back a table view. This allows us to correctly animate changes in the underlying data, even with filter and sort transformations applied.","title":"Table View Animations with Reactive Arrays","number":70,"collection":"table-views","released_at":528994800,"url":"https:\/\/talk.objc.io\/episodes\/S01E70-table-view-animations-with-reactive-arrays","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749870_590x270.jpg","subscription_only":true},{"media_duration":1855,"synopsis":"We build a reactive array type on top of the reactive list from episode #67 and implement a filter method.","title":"Reactive Data Structures: Arrays","number":69,"collection":"experiments","released_at":528390000,"url":"https:\/\/talk.objc.io\/episodes\/S01E69-reactive-data-structures-arrays","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731749914_590x270.jpg","subscription_only":false},{"media_duration":1499,"synopsis":"We extend our Elm-style app with a more dynamic view hierarchy by adding a navigation controller and a table view.","title":"The Elm Architecture (Part 2)","number":68,"collection":"architecture","released_at":527785200,"url":"https:\/\/talk.objc.io\/episodes\/S01E68-the-elm-architecture-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750218_590x270.jpg","subscription_only":true},{"media_duration":1558,"synopsis":"We build a reactive linked list on top of reactive programming primitives. We implement a reduce method on this type, which does the minimum amount of work when the underlying data changes.","title":"Reactive Data Structures: Linked Lists","number":67,"collection":"experiments","released_at":527180400,"url":"https:\/\/talk.objc.io\/episodes\/S01E67-reactive-data-structures-linked-lists","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750268_590x270.jpg","subscription_only":false},{"media_duration":999,"synopsis":"We refactor our reducer-based project from episode #62 to use The Elm Architecture. Instead of interacting with UIKit directly, we build a virtual view hierarchy and let our Elm framework do the rest.","title":"The Elm Architecture (Part 1)","number":66,"collection":"architecture","released_at":526575600,"url":"https:\/\/talk.objc.io\/episodes\/S01E66-the-elm-architecture-part-1","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750389_590x270.jpg","subscription_only":true},{"media_duration":1678,"synopsis":"We create a custom Quick Look extension to visualize binary tree structures in playgrounds.","title":"Playground QuickLook for Binary Trees","number":65,"collection":"data-structures","released_at":525970800,"url":"https:\/\/talk.objc.io\/episodes\/S01E65-playground-quicklook-for-binary-trees","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750425_590x270.jpg","subscription_only":false},{"media_duration":1824,"synopsis":"We build a component similar to NSFetchedResultsController to decouple our view data and to drive table view animations.","title":"Driving Table View Animations","number":64,"collection":"table-views","released_at":525366000,"url":"https:\/\/talk.objc.io\/episodes\/S01E64-driving-table-view-animations","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750489_590x270.jpg","subscription_only":true},{"media_duration":1379,"synopsis":"We refine the observation capabilities of our new data type.","title":"Mutable Shared Structs (Part 2)","number":63,"collection":"experiments","released_at":524761200,"url":"https:\/\/talk.objc.io\/episodes\/S01E63-mutable-shared-structs-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750521_590x270.jpg","subscription_only":false},{"media_duration":1860,"synopsis":"We show the reducer pattern to simplify state management and to make typical view controller code more testable.","title":"Testable View Controllers with Reducers","number":62,"collection":"architecture","released_at":524156400,"url":"https:\/\/talk.objc.io\/episodes\/S01E62-testable-view-controllers-with-reducers","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750588_590x270.jpg","subscription_only":true},{"media_duration":1810,"synopsis":"We recap the tradeoffs between classes and structs and start implementation of our new type, leveraging Swift 4's keypaths.","title":"Mutable Shared Structs (Part 1)","number":61,"collection":"experiments","released_at":523551600,"url":"https:\/\/talk.objc.io\/episodes\/S01E61-mutable-shared-structs-part-1","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750610_590x270.jpg","subscription_only":false},{"media_duration":864,"synopsis":"We show some of our favorite new productivity features in Xcode 9.","title":"Xcode 9 Productivity Tips","number":60,"collection":"tooling","released_at":522946800,"url":"https:\/\/talk.objc.io\/episodes\/S01E60-xcode-9-productivity-tips","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750671_590x270.jpg","subscription_only":true},{"media_duration":754,"synopsis":"We take a look at features like renaming, extracting expressions, extracting methods, and more.","title":"Refactoring with Xcode 9","number":59,"collection":"tooling","released_at":522342000,"url":"https:\/\/talk.objc.io\/episodes\/S01E59-refactoring-with-xcode-9","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750707_590x270.jpg","subscription_only":false},{"media_duration":1911,"synopsis":"Building on the binary search tree code from episode #56, we implement red-black trees as self-balancing tree data structures and benchmark their performance.","title":"Red-Black Trees","number":58,"collection":"functional-programming","released_at":521737200,"url":"https:\/\/talk.objc.io\/episodes\/S01E58-red-black-trees","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750730_590x270.jpg","subscription_only":true},{"media_duration":1471,"synopsis":"Today we're joined by Rob Napier, who explains why and how to add certificate pinning to your app.","title":"Certificate Pinning","number":57,"collection":"","released_at":521132400,"url":"https:\/\/talk.objc.io\/episodes\/S01E57-certificate-pinning","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750798_590x270.jpg","subscription_only":false},{"media_duration":1620,"synopsis":"We look at binary search trees as an alternative to last episode's sorted array implementation. We benchmark the performance of insertion and lookup in both data structures, with some surprising results.","title":"Binary Search Trees","number":56,"collection":"functional-programming","released_at":520527600,"url":"https:\/\/talk.objc.io\/episodes\/S01E56-binary-search-trees","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750866_590x270.jpg","subscription_only":true},{"media_duration":1611,"synopsis":"Together with Károly, we improve our sorted array implementation using binary search. We benchmark both implementations to learn about their real-world performance.","title":"Sorted Arrays with Binary Search","number":55,"collection":"data-structures","released_at":519922800,"url":"https:\/\/talk.objc.io\/episodes\/S01E55-sorted-arrays-with-binary-search","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750905_590x270.jpg","subscription_only":false},{"media_duration":987,"synopsis":"We write a dedicated target-action to make it easier to augment existing UI controls with callbacks.","title":"UI Elements with Callbacks","number":54,"collection":"architecture","released_at":519318000,"url":"https:\/\/talk.objc.io\/episodes\/S01E54-ui-elements-with-callbacks","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731750982_590x270.jpg","subscription_only":true},{"media_duration":2327,"synopsis":"Lisa from Kickstarter shows us their test-driven development process to reactive programming.","title":"Test-Driven Reactive Programming","number":53,"collection":"reactive-programming","released_at":518713200,"url":"https:\/\/talk.objc.io\/episodes\/S01E53-test-driven-reactive-programming","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751022_590x270.jpg","subscription_only":false},{"media_duration":709,"synopsis":"Swift 4's new features lets us delete code we've written in previous episodes.","title":"Deleting Code with Swift 4","number":52,"collection":"swift-the-language","released_at":518108400,"url":"https:\/\/talk.objc.io\/episodes\/S01E52-deleting-code-with-swift-4","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751067_590x270.jpg","subscription_only":true},{"media_duration":1283,"synopsis":"Brandon from Kickstarter demos how the company uses playgrounds to prototype and style individual view controllers.","title":"Playground-Driven Development","number":51,"collection":"ios-at-kickstarter","released_at":517503600,"url":"https:\/\/talk.objc.io\/episodes\/S01E51-playground-driven-development","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751132_590x270.jpg","subscription_only":false},{"media_duration":1514,"synopsis":"We extend our libpq wrapper to handle queries with properly escaped parameters. To achieve this, we have to dive deep into Swift's unsafe pointer APIs.","title":"Interfacing with PostgreSQL (Part 2)","number":50,"collection":"server-side-swift","released_at":516898800,"url":"https:\/\/talk.objc.io\/episodes\/S01E50-interfacing-with-postgresql-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751168_590x270.jpg","subscription_only":true},{"media_duration":1631,"synopsis":"Brandon from Kickstarter shows their approach of unifying all potential entry points into an iOS app using a common route enum, both in a simple demo implementaion and in their open source code base.","title":"Deep Linking","number":49,"collection":"ios-at-kickstarter","released_at":516294000,"url":"https:\/\/talk.objc.io\/episodes\/S01E49-deep-linking","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751221_590x270.jpg","subscription_only":false},{"media_duration":1730,"synopsis":"We implement a lightweight wrapper around the libpq C library.","title":"Interfacing with PostgreSQL","number":48,"collection":"server-side-swift","released_at":515689200,"url":"https:\/\/talk.objc.io\/episodes\/S01E48-interfacing-with-postgresql","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751254_590x270.jpg","subscription_only":true},{"media_duration":2038,"synopsis":"Brandon from Kickstarter shows us how they write highly testable code with view models. We integrate Apple Pay payments and look at their open-source codebase.","title":"View Models","number":47,"collection":"ios-at-kickstarter","released_at":515084400,"url":"https:\/\/talk.objc.io\/episodes\/S01E47-view-models","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751310_590x270.jpg","subscription_only":false},{"media_duration":959,"synopsis":"We look at multiple ways to create variables that have a class type but also conform to a protocol.","title":"Combined Class and Protocol Requirements","number":46,"collection":"swift-the-language","released_at":514479600,"url":"https:\/\/talk.objc.io\/episodes\/S01E46-combined-class-and-protocol-requirements","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751375_590x270.jpg","subscription_only":true},{"media_duration":1367,"synopsis":"We implement a type safe and Swift-like routing infrastructure that's pretty different from the common approach of most web frameworks.","title":"Routing","number":45,"collection":"server-side-swift","released_at":513874800,"url":"https:\/\/talk.objc.io\/episodes\/S01E45-routing","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751410_590x270.jpg","subscription_only":false},{"media_duration":1473,"synopsis":"We set up our development environment using the Swift package manager and Docker.","title":"Setting Up a Server-Side Swift Project","number":44,"collection":"server-side-swift","released_at":513270000,"url":"https:\/\/talk.objc.io\/episodes\/S01E44-setting-up-a-server-side-swift-project","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751480_590x270.jpg","subscription_only":true},{"media_duration":1012,"synopsis":"Instead of letting multiple view controllers manage the navigation bar's state individually, we pull this code out and unify the logic in one place.","title":"View Controller Refactoring","number":43,"collection":"architecture","released_at":512665200,"url":"https:\/\/talk.objc.io\/episodes\/S01E43-view-controller-refactoring","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751522_590x270.jpg","subscription_only":false},{"media_duration":1416,"synopsis":"We make our Signal implementation thread-safe by safeguarding the access to shared resources.","title":"Thread Safety","number":42,"collection":"reactive-programming","released_at":512060400,"url":"https:\/\/talk.objc.io\/episodes\/S01E42-thread-safety","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751552_590x270.jpg","subscription_only":true},{"media_duration":1011,"synopsis":"To conform IndexSet to the Collection protocol we implement a custom index type along the way.","title":"Conforming IndexSet to Collection","number":41,"collection":"collection-protocols","released_at":511455600,"url":"https:\/\/talk.objc.io\/episodes\/S01E41-conforming-indexset-to-collection","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746087_590x270.jpg","subscription_only":false},{"media_duration":988,"synopsis":"We add the ability to map over signals and control subscriptions in a more fine-grained manner. Along the way, we improve the signal ownership model and implement the concept of disposables.","title":"Signal Ownership and Subscriptions","number":40,"collection":"reactive-programming","released_at":510850800,"url":"https:\/\/talk.objc.io\/episodes\/S01E40-signal-ownership-and-subscriptions","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751705_590x270.jpg","subscription_only":true},{"media_duration":1425,"synopsis":"We extend the Future type of a previous episode to a simple reactive library. Along the way, we dive into debugging a reference cycle in our implementation.","title":"From Futures to Signals","number":39,"collection":"reactive-programming","released_at":510246000,"url":"https:\/\/talk.objc.io\/episodes\/S01E39-from-futures-to-signals","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751744_590x270.jpg","subscription_only":false},{"media_duration":848,"synopsis":"Conforming to the Sequence protocol allows us to efficiently iterate over the elements, and we gain all of its useful functionality.","title":"Conforming IndexSet to Sequence","number":38,"collection":"collection-protocols","released_at":509641200,"url":"https:\/\/talk.objc.io\/episodes\/S01E38-conforming-indexset-to-sequence","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751802_590x270.jpg","subscription_only":true},{"media_duration":1132,"synopsis":"We build the basics for a custom index set collection type.","title":"Building a Custom IndexSet Collection","number":37,"collection":"collection-protocols","released_at":509036400,"url":"https:\/\/talk.objc.io\/episodes\/S01E37-building-a-custom-indexset-collection","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751873_590x270.jpg","subscription_only":false},{"media_duration":1050,"synopsis":"We implement a Futures type that we can use instead of callbacks as a first step towards a reactive library.","title":"Futures","number":36,"collection":"reactive-programming","released_at":508431600,"url":"https:\/\/talk.objc.io\/episodes\/S01E36-futures","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751931_590x270.jpg","subscription_only":true},{"media_duration":1002,"synopsis":"We build a sorted array type on top of Swift's native array and make it conform to the Collection protocol.","title":"Sorted Arrays","number":35,"collection":"collection-protocols","released_at":507826800,"url":"https:\/\/talk.objc.io\/episodes\/S01E35-sorted-arrays","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731751957_590x270.jpg","subscription_only":false},{"media_duration":1572,"synopsis":"We take a look at how reactive programming challenges us to think differently.","title":"Reactive Programming","number":34,"collection":"reactive-programming","released_at":507222000,"url":"https:\/\/talk.objc.io\/episodes\/S01E34-reactive-programming","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752062_590x270.jpg","subscription_only":true},{"media_duration":1014,"synopsis":"We make our collection extension even more generic by implementing it on the Sequence protocol.","title":"Sequence & Iterator","number":33,"collection":"collection-protocols","released_at":506617200,"url":"https:\/\/talk.objc.io\/episodes\/S01E33-sequence-iterator","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752094_590x270.jpg","subscription_only":false},{"media_duration":916,"synopsis":"We show how to use the Collection protocol to make an extension available not just on array, but on all collections.","title":"Array, ArraySlice & Collection","number":32,"collection":"collection-protocols","released_at":506012400,"url":"https:\/\/talk.objc.io\/episodes\/S01E32-array-arrayslice-collection","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752149_590x270.jpg","subscription_only":true},{"media_duration":914,"synopsis":"Mutating a nested untyped dictionary can be a challenge. To solve it we discuss the mutability of value types and the concept of l-values.","title":"Mutating Untyped Dictionaries","number":31,"collection":"swift-the-language","released_at":505407600,"url":"https:\/\/talk.objc.io\/episodes\/S01E31-mutating-untyped-dictionaries","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752184_590x270.jpg","subscription_only":false},{"media_duration":967,"synopsis":"We talk about the importance of types and interfaces as tools to express your intent precisely and to set the proper boundaries.","title":"Interfaces","number":30,"collection":"","released_at":504802800,"url":"https:\/\/talk.objc.io\/episodes\/S01E30-interfaces","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752247_590x270.jpg","subscription_only":true},{"media_duration":962,"synopsis":"We refactor a class hierarchy using a protocol and discuss the differences between both approaches.","title":"Protocols & Class Hierarchies","number":29,"collection":"swift-the-language","released_at":503593200,"url":"https:\/\/talk.objc.io\/episodes\/S01E29-protocols-class-hierarchies","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752713_590x270.jpg","subscription_only":false},{"media_duration":1082,"synopsis":"We extend our notification wrapper from episode #27 and discuss an alternative protocol-based approach.","title":"Typed Notifications (Part 2)","number":28,"collection":"type-safe-api-wrappers","released_at":502988400,"url":"https:\/\/talk.objc.io\/episodes\/S01E28-typed-notifications-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752779_590x270.jpg","subscription_only":true},{"media_duration":1072,"synopsis":"A lightweight generic wrapper around Foundation's notification API lets us avoid boilerplate code and provides a type-safe API.","title":"Typed Notifications (Part 1)","number":27,"collection":"type-safe-api-wrappers","released_at":502383600,"url":"https:\/\/talk.objc.io\/episodes\/S01E27-typed-notifications-part-1","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752818_590x270.jpg","subscription_only":false},{"media_duration":1410,"synopsis":"We build a generic, type-safe table view controller that can handle multiple cell classes.","title":"Generic Table View Controllers (Part 2)","number":26,"collection":"table-views","released_at":501778800,"url":"https:\/\/talk.objc.io\/episodes\/S01E26-generic-table-view-controllers-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752867_590x270.jpg","subscription_only":true},{"media_duration":1413,"synopsis":"We add support for caching network requests without altering our original networking abstraction.","title":"Adding Caching","number":25,"collection":"networking","released_at":501174000,"url":"https:\/\/talk.objc.io\/episodes\/S01E25-adding-caching","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752888_590x270.jpg","subscription_only":false},{"media_duration":929,"synopsis":"We discuss the pros and cons of delegates versus callback functions and why delegate protocols are always class only.","title":"Delegates & Callbacks","number":24,"collection":"architecture","released_at":500569200,"url":"https:\/\/talk.objc.io\/episodes\/S01E24-delegates-callbacks","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752951_590x270.jpg","subscription_only":true},{"media_duration":1447,"synopsis":"We talk about a familiar but surprisingly tricky problem: splitting an array into groups of elements. We discuss the pros and cons of our own solutions along with the solutions people sent us via Twitter!","title":"Splitting Arrays","number":23,"collection":"","released_at":499964400,"url":"https:\/\/talk.objc.io\/episodes\/S01E23-splitting-arrays","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731752987_590x270.jpg","subscription_only":false},{"media_duration":1037,"synopsis":"We show how we build simple command line tools leveraging the Cocoa frameworks. We use the Swift Package manager to include dependencies in our project.","title":"Command Line Tools with Swift","number":22,"collection":"","released_at":499359600,"url":"https:\/\/talk.objc.io\/episodes\/S01E22-command-line-tools-with-swift","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753007_590x270.jpg","subscription_only":true},{"media_duration":967,"synopsis":"We can change structs by mutation, functional chaining, and inout parameters. We discuss how they differ at the call site and why they’re all equivalent.","title":"Structs and Mutation","number":21,"collection":"swift-the-language","released_at":498754800,"url":"https:\/\/talk.objc.io\/episodes\/S01E21-structs-and-mutation","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753062_590x270.jpg","subscription_only":false},{"media_duration":1131,"synopsis":"We use copy-on-write to write an efficient struct wrapper around NSMutableData and discuss how the standard library uses the same approach.","title":"Understanding Value Type Performance","number":20,"collection":"swift-the-language","released_at":498150000,"url":"https:\/\/talk.objc.io\/episodes\/S01E20-understanding-value-type-performance","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753085_590x270.jpg","subscription_only":true},{"media_duration":1385,"synopsis":"We build a flexible sort descriptor abstraction on top of Swift's native sort methods, which is dynamic and type safe.","title":"From Runtime Programming to Functions","number":19,"collection":"functional-programming","released_at":497545200,"url":"https:\/\/talk.objc.io\/episodes\/S01E19-from-runtime-programming-to-functions","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753134_590x270.jpg","subscription_only":false},{"media_duration":960,"synopsis":"We leverage the existing infrastructure of our app to add a search field with very little code.","title":"Adding Search","number":18,"collection":"ledger-mac-app","released_at":496940400,"url":"https:\/\/talk.objc.io\/episodes\/S01E18-adding-search","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753174_590x270.jpg","subscription_only":true},{"media_duration":1111,"synopsis":"We connect multiple view controllers using a coordinator and callback functions. We simplify the control flow by refactoring the UI state into its own struct.","title":"Architecture","number":17,"collection":"ledger-mac-app","released_at":496335600,"url":"https:\/\/talk.objc.io\/episodes\/S01E17-architecture","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753226_590x270.jpg","subscription_only":false},{"media_duration":1290,"synopsis":"We implement some of the more challenging parts of parser combinators.","title":"Building Parser Combinators (Part 2)","number":16,"collection":"functional-programming","released_at":495730800,"url":"https:\/\/talk.objc.io\/episodes\/S01E16-building-parser-combinators-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753306_590x270.jpg","subscription_only":true},{"media_duration":982,"synopsis":"Join us in the functional programming gym to stretch your object-oriented comfort zone while we lay the groundwork for a parser combinator library.","title":"Building Parser Combinators (Part 1)","number":15,"collection":"functional-programming","released_at":495126000,"url":"https:\/\/talk.objc.io\/episodes\/S01E15-building-parser-combinators-part-1","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753338_590x270.jpg","subscription_only":false},{"media_duration":1691,"synopsis":"We build a tree structure from an array of Ledger account names. We first implement the tree using a class, and then we refactor it to a struct and discuss the differences and tradeoffs involved.","title":"Growing Trees with Classes and Structs","number":14,"collection":"ledger-mac-app","released_at":494517600,"url":"https:\/\/talk.objc.io\/episodes\/S01E14-growing-trees-with-classes-and-structs","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753366_590x270.jpg","subscription_only":true},{"media_duration":1523,"synopsis":"We look at two different techniques to parse a simple expression language: handwritten parsers and parser combinators.","title":"Parsing Techniques","number":13,"collection":"ledger-mac-app","released_at":493912800,"url":"https:\/\/talk.objc.io\/episodes\/S01E13-parsing-techniques","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753421_590x270.jpg","subscription_only":false},{"media_duration":1543,"synopsis":"Writing the code for evaluating transactions required continuous refactoring to keep our code simple and clean.","title":"Evaluating Transactions","number":12,"collection":"ledger-mac-app","released_at":493311600,"url":"https:\/\/talk.objc.io\/episodes\/S01E12-evaluating-transactions","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753452_590x270.jpg","subscription_only":true},{"media_duration":1776,"synopsis":"Expressions are at the heart of Ledger. We write an evaluator for this expression language in a test-driven way.","title":"Evaluating Expressions","number":11,"collection":"ledger-mac-app","released_at":492706800,"url":"https:\/\/talk.objc.io\/episodes\/S01E11-evaluating-expressions","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753510_590x270.jpg","subscription_only":false},{"media_duration":465,"synopsis":"We give a quick introduction to Ledger itself and to the Mac app we're going to build.","title":"Introduction","number":10,"collection":"ledger-mac-app","released_at":492706740,"url":"https:\/\/talk.objc.io\/episodes\/S01E10-introduction","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753534_590x270.jpg","subscription_only":false},{"media_duration":834,"synopsis":"In this episode, we answer some of the questions we've received over the past few weeks. We cover networking, table views, stack views, our App class, and testing.","title":"Q&A","number":9,"collection":"","released_at":492094800,"url":"https:\/\/talk.objc.io\/episodes\/S01E9-q-a","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731753573_590x270.jpg","subscription_only":false},{"media_duration":1120,"synopsis":"We add POST support to a simple networking layer, using Swift's enums with associated values and generics.","title":"Adding POST Requests","number":8,"collection":"type-safe-api-wrappers","released_at":491493600,"url":"https:\/\/talk.objc.io\/episodes\/S01E8-adding-post-requests","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745938_590x270.jpg","subscription_only":true},{"media_duration":1303,"synopsis":"We create an abstraction around stack views using enums to specify UI elements in a declarative style.","title":"Stack Views with Enums","number":7,"collection":"architecture","released_at":490888800,"url":"https:\/\/talk.objc.io\/episodes\/S01E7-stack-views-with-enums","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745691_590x270.jpg","subscription_only":false},{"media_duration":1182,"synopsis":"We leverage Swift's generics to keep our table view controller code clean.","title":"Generic Table View Controllers","number":6,"collection":"table-views","released_at":490280400,"url":"https:\/\/talk.objc.io\/episodes\/S01E6-generic-table-view-controllers","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746199_590x270.jpg","subscription_only":true},{"media_duration":1214,"synopsis":"We refactor our code by moving the app's flow from the storyboard into a separate coordinator class. This avoids view controllers having implicit knowledge of their context.","title":"Connecting View Controllers","number":5,"collection":"architecture","released_at":489675600,"url":"https:\/\/talk.objc.io\/episodes\/S01E5-connecting-view-controllers","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746253_590x270.jpg","subscription_only":false},{"media_duration":1113,"synopsis":"We add customizable styles to our CommonMark renderer from episode #2.","title":"Rendering CommonMark (Part 2)","number":4,"collection":"functional-programming","released_at":489072600,"url":"https:\/\/talk.objc.io\/episodes\/S01E4-rendering-commonmark-part-2","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745802_590x270.jpg","subscription_only":true},{"media_duration":1310,"synopsis":"We explore different approaches to factor out asynchronous loading code from view controllers, using protocols, container view controllers, and generics.","title":"Loading View Controllers","number":3,"collection":"networking","released_at":488473200,"url":"https:\/\/talk.objc.io\/episodes\/S01E3-loading-view-controllers","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731746009_590x270.jpg","subscription_only":false},{"media_duration":1395,"synopsis":"We create attributed strings from CommonMark. We continually refactor our code to make the central logic short and understandable.","title":"Rendering CommonMark","number":2,"collection":"functional-programming","released_at":487868400,"url":"https:\/\/talk.objc.io\/episodes\/S01E2-rendering-commonmark","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745849_590x270.jpg","subscription_only":true},{"media_duration":1369,"synopsis":"We make use of Swift's generics and structs to build a simple network layer with great testability.","title":"Tiny Networking Library","number":1,"collection":"type-safe-api-wrappers","released_at":487868400,"url":"https:\/\/talk.objc.io\/episodes\/S01E1-tiny-networking-library","small_poster_url":"https:\/\/i.vimeocdn.com\/video\/731745967_590x270.jpg","subscription_only":false}]